# Advent of Code (AoC) - day 15, task 1

import "prelude.eg"

using System, OS, List, String (to_chars, from_chars), D = Dict

def parse = do map to_chars |> split_on {} |> [{XX,YY} -> (D::from_lists XX, reduce (++) YY)]

def dir = ['^' -> (-1,0) |'v' -> (1,0)|'<' -> (0,-1)|'>' -> (0,1)]

def start = do D::to_list |> filter ((==) '@' . snd) |> head |> fst

def ahead =
    [D P V ->
        let Q = add P V in 
        if D::has D Q then ['O' -> {Q|ahead D Q V} |'.' -> {Q} |_ -> {}] (D::get D Q)
        else {}]

def step = 
    [D P V -> 
        print (ahead D P V) "\n";
        [{} -> (D,P)
        |{Q|QQ} -> if D::get D (last {Q|QQ}) == '.' 
            then (D::set (foldl [D P -> D::set D P 'O'] (D::set D P '.') QQ) Q '@', add P V)
            else (D,P)]
        (ahead D P V)]

def steps = [D P VV -> foldl [(D,P) V -> print P "\n";step D P V] (D,P) VV]

def size = do D::keys |> reduce [P Q -> if P < Q then Q else P]

def debug =
    [D P -> [(X,Y) -> map [X -> map [Y -> print (D::get D (X,Y))] (from_to 0 Y); print "\n"] (from_to 0 X); none] (size D)] 

def main =
    read_lines stdin |> parse 
    #|> [(D,Y) -> debug D (start D)]
    |> [(D, Y) -> steps D (start D) (map dir Y)]
    |> fst |> D::to_list |> filter ((==) 'O' . snd) |> map fst |> map [(X,Y) -> 100 * X + Y] |> sum

