# Advent of Code (AoC) - day 15, task 2

import "prelude.eg"

using System, OS, List, String (to_chars), D = Dict

def parse = do map to_chars |> split_on {} |> [{XX,YY} -> (XX, reduce (++) YY)]

def dir = ['^' -> (-1,0) |'v' -> (1,0)|'<' -> (0,-1)|'>' -> (0,1)]

def expand = flatmap ['@' -> {'@','.'}|'O' -> {'[',']'}|'.' -> {'.','.'}|'#'->{'#','#'}]

def start = do D::to_list |> filter ((==) '@' . snd) |> head |> fst

def cat = [none F -> none | XX F -> [none -> none| YY -> XX++YY] (F none)]

def region = [D P V -> let Q = add P V in
    [(_,0) '[' -> cat {P, add (0,1) P} [_ -> cat (region D Q V) [_ -> region D (add (0,1) Q) V]]
    |(_,0) ']' -> cat {P, add (0,-1) P} [_ -> cat (region D Q V) [_ -> region D (add (0,-1) Q) V]]
    |(0,_) '[' -> cat {P, Q} [_ -> region D (add (0,1) Q) V]
    |(0,_) ']' -> cat {P, Q} [_ -> region D (add (0,-1) Q) V]
    |_     '@' -> cat {P} [_ -> region D (add P V) V]
    |_     '#' -> none 
    |_     _   -> {}] V (D::get D P)]

def shove = 
    [D PP V -> foldl [D (P,X) -> D::set D P X] D
            (map [P -> (P,'.')] PP ++ map [P -> (add P V, D::get D P)] PP)]

def step = [D P V -> [none -> (D,P)|PP -> (shove D PP V, add P V)] (region D P V)]

def main =
    read_lines stdin |> parse |> [(XX,VV) ->(D::from_lists (map expand XX), map dir VV)]
    |> [(D,VV) -> foldl [(D,P) V -> print P "\n"; step D P V] (D, start D) VV] |> fst
    |> D::to_list |> foldl [N ((X,Y),'[') -> N + 100 * X + Y |N _ -> N] 0

