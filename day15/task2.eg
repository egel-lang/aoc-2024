# Advent of Code (AoC) - day 15, task 2

import "prelude.eg"

using System, OS, List, String (to_chars, from_chars), D = Dict

def parse = do map to_chars |> split_on {} |> [{XX,YY} -> (XX, reduce (++) YY)]

def dir = ['^' -> (-1,0) |'v' -> (1,0)|'<' -> (0,-1)|'>' -> (0,1)]

def expand = flatmap ['@' -> {'@','.'}|'O' -> {'[',']'}|'.' -> {'.','.'}|'#'->{'#','#'}]

def start = do D::to_list |> filter ((==) '@' . snd) |> head |> fst

def ahead =
    [D P V ->
        let Q = add P V in 
        [(_,0) '[' -> (Q, add (0,1) Q, ahead D Q V, ahead D (add (0,1) Q) V)
        |(_,0) ']' -> (Q, add (0,-1) Q, ahead D Q V, ahead D (add (0,-1) Q) V)
        |(0,_) '[' -> (Q, add (0,1) Q, ahead D (add (0,1) Q) V)
        |(0,_) ']' -> (Q, add (0,-1) Q, ahead D (add (0,-1) Q) V)
        |_     _   -> Q] V (D::get D Q)]

def blocked =
    [D (_,_,PP,QQ) -> blocked D PP || [_ -> blocked D QQ]
    |D (_,_,PP) -> blocked D PP
    |D P -> (D::get D P) /= '.']

def boxes = [(P,Q,PP,QQ) -> {P,Q|boxes PP ++ boxes QQ} | (P,Q,PP) -> {P,Q|boxes PP} | _ -> {}]

def shove =
    [D PP V ->
        let C = foldl [D P -> D::set D P '.'] (D::copy D) PP in
        foldl [C P -> D::set C (add P V) (D::get D P)] C PP ]  

def step = [D P V -> printf "{} {} {}\n" P V (ahead D P V);
        [PP -> if blocked D PP then (D,P) else (shove (shove D (boxes PP) V) {P} V, add P V)] (ahead D P V)]

def steps = [D P VV -> foldl [(D,P) V -> print P "\n";step D P V] (D,P) VV]

def size = do D::keys |> reduce [P Q -> if P < Q then Q else P]

def debug =
    [D -> [(X,Y) -> map [X -> map [Y -> print (D::get D (X,Y))] (from_to 0 Y); print "\n"] (from_to 0 X); none] (size D)] 

def main =
    read_lines stdin |> parse |> [(XX,VV) ->(D::from_lists (map expand XX), map dir VV)]
    |> [(D,VV) -> steps D (start D) VV]
    #|> fst |> debug
    |> fst |> D::to_list |> filter ((==) '[' . snd) |> map fst |> map [(X,Y) -> 100 * X + Y] |> sum

