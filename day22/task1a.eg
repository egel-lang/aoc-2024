# Advent of Code (AoC) - day 22, task 1

import "prelude.eg"
using System, OS, List, D = Dict

data rot24, xor24, and24, shiftl24, shiftr24
def mask24 = 0xffffff

def step = 
    let F = [F N -> xor24 (and24 (F N) mask24) N] in
    let A = F [N -> shiftl24 N 6] "x" in
    let B = F [N -> shiftr24 N 5] A in
    let C = F [N -> shiftl24 N 11] B in C

def cannonical =
    [(shiftl24 X N) -> let X = cannonical X in and24 (rot24 X N) (mask24<<N)
    |(shiftr24 X N) -> let X = cannonical X in and24 (rot24 X (24 - N)) (mask24>>N)
    |(OP X Y) -> OP (cannonical X) (cannonical Y)
    |X -> X]

def sub = [X (OP A B) -> OP (sub X A) (sub X B)|X "x" -> X|X N -> N]

def eval = 
    [(and24 A B) -> ((eval A)&(eval B))&mask24
    |(xor24 A B) -> ((eval A)^(eval B))&mask24
    |(rot24 A N) -> let A = eval A in ((A << N) $ ((A >> (24 - N)) & mask24))
    |N -> N]

def apply = [T N -> eval (sub N T)]

# we know we can construct a matrix M for `step` and raise that to 2000.
# does that coincide with a normalizing strategy for terms on Xor/And/Rot?

# idea: given two terms in AoC normal form make sure that the operations
# return a term in normal form...

# rotation is pushed to the bottom
def rotnf =
    [A:int N-> eval (rot24 A B)
    |(rot24 A M) N -> rot24 A ((N+M)%24)
    |(and24 A B) N -> and24 (rotnf A N) (rotnf B N)
    |(xor24 A B) N -> xor24 (rotnf A N) (rotnf B N)
    |X N -> rot24 X N]

# xor stays at the top
def xornf =
    [A:int B:int -> eval (xor24 A B)
    |A:int (xor24 B:int C) -> xornf (eval(xor24 A B)) C
    |A (xor24 B:int C)) -> xornf B (xornf A C) # XXX
    |(xor24 A B) C -> xornf A (xor24 B C))
    |A (xor24 B C)) -> xor24 A (rewrite (xor24 B C))

# conjunction is pushed under the xor
def andnf =
    [A:int B:int -> eval (and24 A B)
    |(xor24 B C) A -> xornf (andnf A B) (andnf A C)
    |A (xor24 B C) -> xornf (andnf A B) (andnf A C)
    
def rewrite = #do later
    [(OP A:int B:int) -> eval (OP A B)

    |(and24 A (xor24 B C)) -> rewrite (xor24 (and24 A B) (and24 A C))
    |(and24 (xor24 B C) A) -> rewrite (xor24 (and24 A B) (and24 A C))

    #|(xor24 (rot24 A N) M) -> rewrite (rot24 (xor24 A (rot24 M (24-N))) N)

    |(and24 (and24 A B) C) -> rewrite (and24 A (and24 B C))
    |(and24 A:int (and24 B:int C)) -> rewrite (and24 (eval(and24 A B)) C)
    |(and24 A (and24 B:int C)) -> rewrite (and24 B (and24 A C))
    |(and24 A (and24 B C)) -> and24 A (rewrite (and24 B C))

    |(xor24 (xor24 A B) C) -> rewrite (xor24 A (xor24 B C))
    |(xor24 A:int (xor24 B:int C)) -> rewrite (xor24 (eval(xor24 A B)) C)
    |(xor24 A (xor24 B:int C)) -> rewrite (xor24 B (xor24 A C))
    |(xor24 A (xor24 B C)) -> xor24 A (rewrite (xor24 B C))

    #|(and24 (rot24 A N) M:int) -> rewrite (rot24 (and24 A (rot24 M (24-N))) N)

    |(rot24 (rot24 A N) M) -> rot24 A ((N+M)%24)
    |(OP (rot24 A N) (rot24 B M)) ->
        if N < M then OP (rewrite (rot24 A N)) (rewrite (rot24 B M))
        else if N == M then rewrite (rot24 (OP A B) N)
        else OP (rewrite (rot24 B M)) (rewrite (rot24 A N))

    |(OP A B) -> print (pp (OP A B)) "\n"; OP (rewrite A) (rewrite B) |N -> N]

def pp =
    [(and24 A B) -> "(" + pp A + " & " + pp B + ")"
    |(xor24 A B) -> "(" + pp A + " ^ " + pp B + ")"
    |(rot24 A B) -> "(" + pp A + " rot " + pp B + ")"
    |N -> to_text N]

def normalize = [T -> let T0 = rewrite T in if T == T0 then T else normalize T0]

def main = step |> cannonical |> normalize |> pp # flip apply 123

