# Advent of Code (AoC) - day 22, task 1

import "prelude.eg"

using System, OS, List, D = Dict

data rot24, xor24, and24, shiftl24, shiftr24

def mask24 = 0xffffff
def step = 
    let F = [F N -> (((F N),and24,mask24),xor24,N)] in
    let A = F [N -> (N,shiftl24,6)] 'i' in
    let B = F [N -> (N,shiftr24,5)] A in
    let C = F [N -> (N,shiftl24,11)] B in C

def cannonical =
    [(X,shiftl24,N) -> let X = cannonical X in ((X,rot24,N),and24,(mask24<<N))
    |(X,shiftr24,N) -> let X = cannonical X in ((X,rot24,24 - N),and24,(mask24>>N))
    |(X,OP,Y) -> (cannonical X, OP, cannonical Y)
    |X -> X]

def sub = [I (A,OP,B) -> (sub I A,OP,sub I B) |I 'i' -> I | I N -> N]

def eval = 
    [(A,and24,B) -> ((eval A)&(eval B))&mask24
    |(A,xor24,B) -> ((eval A)^(eval B))&mask24
    |(A,rot24,N) -> let A = eval A in ((A << N) $ ((A >> (24 - N)) & mask24))
    |N -> N]

def apply = [N T -> eval (sub N T)]

def normalize = #do later
    [(A,and24,B) -> 0]

def main = step |> cannonical |> apply 123

