# Advent of Code (AoC) - day 22, task 2

import "prelude.eg"

using System, OS, List, D = Dict


def step =
    [N -> let F = [G N -> ((G N)^N)%16777216] in
        F ((*) 64) N |> F ((flip (/) 32)) |> F ((*)2048)]

def trace = [0 F X -> {} |N F X -> {X|trace (N - 1) F (F X)}] 

def group =
    [{(I,A),(J,B),(K,C),(L,D)|XX} -> {({A,B,C,D},L)|group {(J,B),(K,C),(L,D)|XX}}
    |_ -> {}]

def prices = 
    do trace 2000 step |> map (flip (%) 10) 
    |> [XX -> zip (tail XX) (zip_with (-) (tail XX) XX)]
    |> group

def count =
    [D XX -> foldl [D XX -> 
                   let V = D::dict in 
                   foldl [D (T,N) -> if D::has V T then D else D::set V T 0; D::set_with D (+) T N] D XX]
             D XX]     

def main =
    read_lines stdin |> map to_int 
    |> map prices |> count D::dict
    |> D::to_list |> map snd |> maximum

