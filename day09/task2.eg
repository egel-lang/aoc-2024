# Advent of Code (AoC) - day 9, task 2

import "prelude.eg"

using System, OS, List, String (to_chars, from_chars)

def to_fs =
    do foldl_state [(0, N) XX X -> ((1, N+1), {(X, N)|XX})
                   |(1, N) XX X -> ((0, N), {(X, none)|XX})] (0,0) {}
       |> reverse

def wipe =
    [I {(J,Y)|XX} -> if I == Y then {(J,none)|XX} else {(J,Y)|wipe I XX}]

def place = 
    [(I,X) {(J,none)|XX} -> if I <= J then {(I,X),(J-I,none)|wipe X XX} else {(J,none)|place (I,X) XX}
    |(I,X) {(J,Y)|XX} -> if X == Y then {(J,Y)|XX} else {(J,Y)|place (I,X) XX}]

def compact =
    [XX -> foldl [XX (_,none) -> XX|XX F -> place F XX] XX (reverse XX)]

def main =
    read_line stdin |> to_chars |> map to_int
    |> to_fs |> compact 
    |> foldl_state [N M (L,none) -> (N+L,M)|N M (L,F) -> (N+L, M + F*((N+L)*(N+L- 1)/2-(N*(N- 1))/2))] 0 0

