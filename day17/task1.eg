# Advent of Code (AoC) - day 17, task 1

import "prelude.eg"

using System, OS, List, String (to_chars, from_chars), D = Dict

def parse = 
    do map (do Regex::matches (Regex::compile "-?[0-9]+") |> map to_int) |> split_on {}
        |> flatten |> map [{X} -> X|X -> X] |> [{A,B,C,P} -> ((A,B,C,0),P)]

def op =
    [N RR -> if N < 4 then N else proj (N - 4) RR]

def ins =
    [0 N (A,B,C,P) -> (A/(Math::pow_int 2 (op N (A,B,C,P))),B,C,P+2) 
    |1 N (A,B,C,P) -> (A,N^B,C,P+2)
    |2 N (A,B,C,P) -> (A,(op N (A,B,C,P))%8,C,P+2)
    |3 N (0,B,C,P) -> (0,B,C,P+2)
    |3 N (A,B,C,P) -> (A,B,C,N)
    |4 N (A,B,C,P) -> (A,B^C,C,P+2)
    |5 N (A,B,C,P) -> ((A,B,C,P+2),(op N (A,B,C,P))%8)
    |7 N (A,B,C,P) -> (A,B,A/(Math::pow_int 2 (op N (A,B,C,P))),P+2) ]

def fetch = do D::get_with_default none

def step =
    [((A,B,C,P),PP,OO) -> 
        [(none,_) -> none|(_,none) -> none
        |(OP,N) -> [(RR,O) -> (RR,PP,{O|OO})|RR -> (RR,PP,OO)] (ins OP N (A,B,C,P))]
        (fetch PP P, fetch PP (P+1))]
                   
def run = [(RR,PP) -> while step (RR, D::from_list (zip (from_to 0 (length PP)) PP),{}) |> proj 2 |> reverse]

def main =
    read_lines stdin |> parse |> run |> map to_text |> reduce [X Y -> X + "," + Y] |> [X -> print X "\n"]

