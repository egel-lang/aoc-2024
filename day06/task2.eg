# Advent of Code (AoC) - day 6, task 2

import "prelude.eg"

using System, OS, List, String (to_chars, from_chars), D = Dict

val dirs = {(-1, 0), (0, 1), (1, 0), (0,-1)}

def start_pos = 
    [D -> foldl [P0 P1 -> if D::get D P1 == '^' then P1 else P0] (0,0) (D::keys D)]

def track =
    [D S -> trace_while 
        [(P,N) -> D::has D P] 
        [(P,N) -> [Q -> if D::has D Q && [_ -> D::get D Q == '#'] then (P,(N+1)%4) else (Q,N)] (add (nth N dirs) P)]
        (S,0)]

def loops =
    [D S -> let V = D::dict in iter_while
        [(P,N) -> (not (D::has V (P,N))) && [_ -> (D::has D P)]] 
        [(P,N) -> D::set V (P,N) 0; [Q -> if D::has D Q && [_ -> D::get D Q == '#'] then (P,(N+1)%4) else (Q,N)] (add (nth N dirs) P)]
        (S,0) |> D::has V]

def solve =
    [D -> let S = start_pos D in foldl [N P -> if [B -> D::set D P '.';B] (loops (D::set D P '#') S) then N+1 else N] 0 
          (map fst (track D S) |> tail |> unique)]
      
def main =
    read_lines stdin |> map to_chars |> D::from_lists |> solve

