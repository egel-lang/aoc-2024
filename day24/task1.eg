# Advent of Code (AoC) - day 24, task 1

import "prelude.eg"

using System, OS, List, S = String, D = Dict

def xor = [A B -> and (or A B) (not (and A B))]

def assign = 
    foldl [D (X,OP,Y,Z) -> D::set D Z (X, OP, Y)|D (X,Y) -> D::set D X Y|D _ -> D]

def eval0 =
    [D Z -> 
        let F = [A B -> D::set D A B; D] in
        let G = [A -> D::get D A] in
        [(X,"AND",Y) -> eval0 D X; eval0 D Y;F Z (and (G X) (G Y))
        |(X,"OR",Y) ->  eval0 D X; eval0 D Y;F Z (or (G X) (G Y))
        |(X,"XOR",Y) -> eval0 D X; eval0 D Y;F Z (xor (G X) (G Y))
        |"0" -> F Z false|"1" -> F Z true|_ -> D] (D::get D Z)]

def eval = [D -> foldl [D Z -> eval0 D Z] D (D::keys D)] 

def num_in = [N S X -> if N < 0 then {} else {(format "{}{:02}" S N,(X&(1<<N)) /= 0)|num_in (N - 1) S X}]
def num_out = [D N S -> if N < 0 then 0 else
        ([B -> if B then 1<<N else 0] (D::get D (format "{}{:02}" S N))) $ (num_out D (N - 1) S)]

def main =
    read_lines stdin |> map (Regex::matches (Regex::compile "[a-zA-Z0-9]+")) |> map list_to_tuple
    |> assign D::dict |> eval |> [D -> num_out D 45 'z']


