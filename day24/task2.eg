# Advent of Code (AoC) - day 24, task 2

import "prelude.eg"

using System, OS, List, S = String, D = Dict

def xor = [A B -> and (or A B) (not (and A B))]

def assign = 
    foldl [D (X,OP,Y,Z) -> D::set D Z (X, OP, Y)|D (X,Y) -> D::set D X Y|D _ -> D]

def eval0 =
    [D Z -> 
        let F = [A B -> D::set D A B; D] in
        let G = [A -> D::get D A] in
        [(X,"AND",Y) -> eval0 D X; eval0 D Y;F Z (and (G X) (G Y))
        |(X,"OR",Y) ->  eval0 D X; eval0 D Y;F Z (or (G X) (G Y))
        |(X,"XOR",Y) -> eval0 D X; eval0 D Y;F Z (xor (G X) (G Y))
        |"0" -> F Z false|"1" -> F Z true|_ -> D] (D::get D Z)]

def eval = [D -> foldl [D Z -> eval0 D Z] D (D::keys D)] 

def num_in = [N S X -> if N < 0 then {} else {(format "{}{:02}" S N,(X&(1<<N)) /= 0)|num_in (N - 1) S X}]
def num_out = [D N S -> if N < 0 then 0 else
        ([B -> if B then 1<<N else 0] (D::get D (format "{}{:02}" S N))) $ (num_out D (N - 1) S)]

def swap = [D A B -> let X = D::get D A in
                     let Y = D::get D B in D::set D A Y;D::set D B X]
def swaps = [D P -> foldl [D (X,Y) -> swap D X Y] (D::copy D) P]

val test_cases = let RNG = [N -> ((N * 1103515245) + 12345) & ((1 << 32) - 1)] in
    map [(X,Y) -> (RNG X, RNG Y)] (zip (from_to 501 600) (from_to 1201 1300))

def test = [D X Y -> let D = eval (assign (assign (Dict::copy D) (num_in 44 "x" X)) (num_in 44 "y" Y)) in
            let X = num_out D 44 "x" in
            let Y = num_out D 44 "y" in
            let Z = num_out D 45 "z" in
            printf "{} + {} = {}\n" X Y Z; (X + Y) == Z]

def tests = [D {} -> true |D {(X,Y)|RR} -> if test D X Y then tests D RR else false]
def valid = [D -> tests D test_cases]

def cycle0 =
    [D VV {} -> false
    |D VV {X|XX} -> if elem X VV then true else 
        [(Y,_,Z) -> cycle0 D {X|VV} {Y,Z|XX}| _ -> cycle0 D {X|VV} XX] (D::get D X)]
def cycle = [D V -> cycle0 D {} {V}]

def heuristic =
    [D X Y -> let D = swap (D::copy D) X Y in (and (not (cycle D X)) (not (cycle D Y))) && [_ ->  ([(_,"XOR",_) (_,"AND",_) -> true |(_,"AND",_) (_,"XOR",_) -> true| _ _ -> false] (D::get D X) (D::get D Y))]]

def dfs =
    [D 0 XX P YY -> print P "\n"; if valid (swaps D P) then P else none
    |D N XX P {} -> none
    |D N XX P {Y} -> none
    |D N XX P {Y|YY} ->
        if elem Y XX then dfs D N XX P YY
        else foldl [none Z -> if heuristic D Y Z then  
                        [none -> none|XX -> XX] (dfs D (N - 1) {Y,Z|XX} {(Y,Z)|P} YY)
                        else none
                   |ZZ Z -> ZZ] none YY |> [none -> dfs D N XX P YY|X -> X]]

def main =
    read_lines stdin |> map (Regex::matches (Regex::compile "[a-zA-Z0-9]+")) |> map list_to_tuple
    |> assign D::dict 
#    |> [D -> print (D::to_list D) "\n" (D::to_list (swaps D {("z01","x02")}))]
    |> [D -> dfs D 4 {} {} (D::keys D)]

