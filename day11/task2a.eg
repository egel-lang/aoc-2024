# Advent of Code (AoC) - day 11, task 2

import "prelude.eg"

using System, OS, List, String (count, sp = split, split_pattern)

def rule = 
    [0 -> {1}
    |N -> let S = to_text N in 
        if (count S)%2 == 0 then 
            sp ((count S)/2) S |> tuple_to_list |> map to_int
        else {N*2024}]

def blink =
    [D (0, S) -> 1
    |D (N, S) -> rule S |> map (tuple (N - 1)) |> map (Dict::memo D blink) |> sum]

def main =
    read_line stdin |> split_pattern " " |> map to_int 
    |> map (tuple 75) |> map (blink Dict::dict) |> sum
