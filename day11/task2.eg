# Advent of Code (AoC) - day 11, task 2

import "prelude.eg"

using System, OS, List, String (len=length, sp=split_at, split_pattern), D = Dict

def rule = 
    [0 -> {1}
    |N -> let S = to_text N in 
        if (len S)%2 == 0 then sp ((len S)/2) S |> tuple_to_list |> map to_int
        else {N*2024}]

def blink =
    do flatmap [(S,N) -> rule S |> map (flip tuple N)] |> D::from_list_with (+) |> D::to_list

def main =
    read_line stdin |> split_pattern " " |> map to_int |> map (flip tuple 1)
    |> iter 75 blink |> map snd |> sum
