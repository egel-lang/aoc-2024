# Advent of Code (AoC) - day 10, task 2

import "prelude.eg"

using System, OS, List, String (to_chars, from_chars)

def dirs = {(-1,0),(1,0),(0,-1),(0,1)}

def start = do Dict::to_list |> filter (do snd |> ((==)'0')) |> map fst

def trails =
    [D -> flatmap [PP -> 
        if Dict::get D (head PP) == '9' then {PP}
        else map (add (head PP)) dirs |> map (flip cons PP)
            |> filter [{P,Q|PP} -> Dict::get_with_default '0' D P == succ (Dict::get D Q)]
            |> trails D]]

def main =
    read_lines stdin |> map to_chars |> Dict::from_lists
    |> [D -> start D |> map (flip cons nil) |> trails D ]
    |> length

