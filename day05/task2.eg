# Advent of Code (AoC) - day 5, task 2

import "prelude.eg"

using System, OS, List

def parse = 
    do Regex::matches (Regex::compile "[0-9]+") |> map to_int

def order =
    foldl [PP {P0,P1} -> [Q0 Q1 -> (not (and (P0 == Q1) (P1 == Q0))) && [_ -> PP Q0 Q1]]] [_ _ -> true]

def ordered_by =
    [PP -> do tails |> init |> all [{X|XX} -> all (PP X) XX]]

def main =
    read_lines stdin |> map parse |> span (do length |> ((==) 2))
    |> [(PP,YY) -> filter (do ordered_by (order PP) |> not) (tail YY) |> map (sort_by (order PP))]
    |> map [XX -> nth ((length XX) / 2) XX] |> sum
