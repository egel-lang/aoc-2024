# Advent of Code (AoC) - day 5, task 2

import "prelude.eg"

using System, OS, List

def parse = 
    do Regex::matches (Regex::compile "[0-9]+") |> map to_int

def order =
    foldl [P {X,Y} -> [A B -> (not (and (X == B) (Y == A))) && [_ -> P A B]]] [_ _ -> true]

def main =
    read_lines stdin |> map parse |> span (do length |> ((==) 2)) |> proj_update 1 tail
    |> [(PP,XX) -> filter (join ((/=) . sort_by (order PP))) XX |> map (sort_by (order PP))]
    |> map (join (nth . flip (/) 2 . length)) |> sum
