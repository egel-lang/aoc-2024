# Advent of Code (AoC) - day 19, task 2

import "prelude.eg"

using System, OS, List, String (starts_with, remove, count, split_pattern), D = Dict

def match =
    [X Y -> if starts_with X Y then remove 0 (count X) Y else none]

def solve =
    [XX _  D "" -> 1
    |XX {} D Z -> 0
    |XX {Y|YY} D Z -> [none -> solve XX YY D Z |Z0 -> (D::memo D (solve XX XX) Z0) + (solve XX YY D Z)] (match Y Z)]

def main =
    read_lines stdin |> split_on "" |> [{{XX},YY} -> (split_pattern ", " XX, YY)]
    |> [(XX, YY) -> map [Y -> solve XX XX D::dict Y] YY |> sum]

